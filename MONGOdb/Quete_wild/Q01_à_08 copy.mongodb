use("mabdd")


<<<<<<< HEAD

/*1-Trouver le nombre de grades A*/
db.restaurants.countDocuments({"grades.grade" : "A"})



/* 2-Ecris une requête qui trie tous les différents scores de restaurants en ordre décroissant*/
db.restaurants.aggregate([
                {$sort : { "score" : -1 }}
                         ])
=======
// 1-Trouver le nombre de grades A
/*count_A = db.Restaurants.countDocuments({"grades.grade" : "A"});
print("The result of Grade A is : ",count_A);*/


// 2-Ecris une requête qui trie tous les différents scores de restaurants
// en ordre décroissant
/*sort_desc_score = db.Restaurants.find({}).sort({"score" : 1})
sort_desc_score;*/
>>>>>>> 90603a1b93e759ae752f78ad5f65f6bc4f9b91d4



<<<<<<< HEAD
/* 3-Ecris une requête qui trouve tous les restaurants dans lesquels les noms des villes commencent par la lettre “B”, “C” ou “D”,
ou se terminent par une voyelle sauf “y”*/

db.restaurants.find(
            {$or:
                 [{borough: /^B/},
                  {borough: /^C/}, 
                  {borough: /^D/}, 
                  {borough: /[aeiou]$/}]})


/*4 - Ecris une requête qui affiche tous les restaurants si et seulement si le score est inférieur 
à 20 ou égale à 25, 30, 35 et 40. (n’oubliez pas de préciser que la vérification se fasse sur chaque instance)*/

db.restaurants.find( { $and: [
                                 {"grades.$score": { $lt: 20} },
                                 { "grades.score": { $in : [25,30,35,40] }}
                                    ] } ,
                             {restaurant_id:0, _id:0, address:0, "grades.date" : 0, "grades.grade" : 0 })

// OU
 
 db.restaurants.find( { $and: [ 
                                { "grades.score": { $lt: 20} },
                            { $or:  [
                                { "grades.score": 25},
                                { "score": 30},
                                { "score": 35},
                                { "score": 40} 
                                    ] }]},
                        {restaurant_id:0,_id:0,address:0, "grades.date" : 0, "grades.grade" : 0 })



/* 5 - Ecris une requête qui fait la somme du nombre de restaurants par type de cuisine*/

db.restaurants.aggregate(
   [
     { $group: { "_id": "$cuisine" , "count": { $sum: 1 } } }
   ]
)


/* 6 - Ecris une requête qui ajoute le commentaire “Je gère le NoSQL” pour les boroughs dont le nom commence par “B”*/
db.restaurants.updateMany(
                {"borough": /.*B.*/},
                {$set: { "commentaire": "Je gère le NoSQL" }}
                        )

/* 7 - Ecris une requête qui supprime la clé “adress” des restaurants qui ont un score supérieur à 25 */
db.restaurants.updateMany(
                {"grades.score": { $gt: 25 }},
                { $unset:  {"address": ""}  }
                )


/* 8 - Ecris une requête qui supprime tous les restaurants dont le nom de quartier est “Queens”*/
db.restaurants.remove( { "borough": "Queens" } )


/* Expliquez */
varUnwind = {$unwind : "$grades"}
varGroup4 = { $group : {"_id" : "$borough", "moyenne" : {$avg : "$grades.score"} } };
varSort2 = { $sort : { "moyenne" : -1 } }
db.restaurants.aggregate( [ varUnwind, varGroup4, varSort2 ] );

//varUnwind : Sur la variable grades  
//varGroup4 : groupe par id et borough, fait la moyenne des scores  
//varSort : Trie dans l'ordre décroissant

//result_4* : Calcul de la moyenne des scores par ville dans l'ordre décroissant

=======
/*noms_villes = db.Restaurants.find({$or: [{borough: /^B/},
                                         {borough: /^C/}, 
                                         {borough: /^D/}, 
                                         {borough: /[aeiou]$/}]})
noms_villes*/

//4-Ecris une requête qui affiche tous les restaurants si et seulement si le score est inférieur à 20 ou égale à 25, 30, 35 et 40
// (n’oubliez pas de préciser que la vérification se fasse sur chaque instance)
//db.Restaurants.find({$or : [{ 'grade.score' : {$lt : 20}}})
db.Restaurants.find ({'Grade.score' : { $in: [25, 30,35,40] } } })



/*
// 5-Ecris une requête qui fait la somme du nombre de restaurants par type de cuisine

// 6-Ecris une requête qui ajoute le commentaire “Je gère le NoSQL” pour les boroughs dont le nom commence par “B”

// 7-Ecris une requête qui supprime la clé “adress” des restaurants qui ont un score supérieur à 25

// 8-Ecris une requête qui supprime tous les restaurants dont le nom de quartier est “Queens”
*/

>>>>>>> 90603a1b93e759ae752f78ad5f65f6bc4f9b91d4
